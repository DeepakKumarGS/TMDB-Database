Importance_Gini = round(importance[ ,'MeanDecreaseGini'],2),Importance_Accuraccy=round(importance[,'MeanDecreaseAccuraccy'],2))
importance    <- importance(rf_model,type=2)
varImportance <- data.frame(Variables = row.names(importance),
Importance_Gini = round(importance[ ,'MeanDecreaseGini'],2),Importance_Accuraccy=round(importance[,'MeanDecreaseAccuraccy'],2))
varImportance <- data.frame(Variables = row.names(importance),
Importance_Gini = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance_Gini))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance_Gini),
y = Importance_Gini, fill = Importance_Gini)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 2, colour = 'purple') +
labs(x = 'Variables') +
coord_flip() +
theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Mean Decrease Gini",y="Variables")
importance_acc    <- importance(rf_model,type=1)
View(importance_acc)
varImportance_acc<- data.frame(Variables = row.names(importance_acc),
Importance_acc = round(importance_acc[ ,'MeanDecreaseAccuracy'],2))
importance_Gini    <- importance(rf_model,type=2)
varImportance_Gini <- data.frame(Variables = row.names(importance_Gini),
Importance_Gini = round(importance_Gini[ ,'MeanDecreaseGini'],2))
rankImportance=merge(varImportance_Gini,varImportance_acc)
View(rankImportance)
ggplot(rankImportance, aes(x = reorder(Variables, Importance_Gini),
y = Importance_Gini, fill = Importance_Gini)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Gini")
ggplot(rankImportance, aes(x = reorder(Variables, Importance_acc),
y = Importance_acc, fill = Importance_acc)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Accuracy")
g1=ggplot(rankImportance, aes(x = reorder(Variables, Importance_Gini),
y = Importance_Gini, fill = Importance_Gini)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Gini",title="Mean Decrease Gini")
g2=ggplot(rankImportance, aes(x = reorder(Variables, Importance_acc),
y = Importance_acc, fill = Importance_acc)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Accuracy",title="Mean Decrease Accuracy")
grid.arrange(g1,g2,nrow=1)
grid.arrange(g1,g2,nrow=2)
grid.arrange(g1,g2,nrow=2)
g1=ggplot(rankImportance, aes(x = reorder(Variables, Importance_Gini),
y = Importance_Gini, fill = Importance_Gini)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Gini",title="Mean Decrease Gini")+scale_x_discrete(labels=function(x) str_wrap(x,width=10))
g2=ggplot(rankImportance, aes(x = reorder(Variables, Importance_acc),
y = Importance_acc, fill = Importance_acc)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Accuracy",title="Mean Decrease Accuracy")+scale_x_discrete(labels=function(x) str_wrap(x,width=10))
grid.arrange(g1,g2,nrow=2)
g1=ggplot(rankImportance, aes(x = reorder(Variables, Importance_Gini),
y = Importance_Gini, fill = Importance_Gini)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Gini",title="Mean Decrease Gini")+scale_x_discrete(labels=function(x) str_wrap(x,width=5))
g2=ggplot(rankImportance, aes(x = reorder(Variables, Importance_acc),
y = Importance_acc, fill = Importance_acc)) +geom_bar(stat='identity') +coord_flip() +theme_few()+scale_fill_continuous(low="red",high="green")+labs(x="Variables",y="Mean Decrease Accuracy",title="Mean Decrease Accuracy")+scale_x_discrete(labels=function(x) str_wrap(x,width=5))
grid.arrange(g1,g2,nrow=2)
View(smote_train)
View(smote_train_nn)
View(train.scale)
View(test)
rf.fitted=predict(rf_model,newdata=test[,-1],type="class")
View(test.scale)
rf.fitted=predict(rf_model,newdata=test.scale[,!names(test.scale) %in% "Attrition"],type="class")
rf.fitted=predict(rf_model,newdata=test.scale[,!names(test.scale) %in% "Attrition"],type="class")
rf.fitted
cm_rf=table(Predicted=rf.fitted,Actual=test.scale$Attrition)
confusionMatrix(cm_rf,positive="1",mode="prec_accr")
confusionMatrix(cm_rf,positive="1",mode="prec_recall")
table(test.scale$Attrition)
rf_roc=predict(rf.fitted,test.scale,type="prob")
rf_roc=predict(rf.fitted,test.scale[,!names(test.scale) %in% "Attrition"],type="prob")
test.scale$Attrition=as.numeric(as.character(test.scale$Attrition))
rf_roc=predict(rf.fitted,test.scale[,!names(test.scale) %in% "Attrition"],type="prob")
pred <- prediction(rf.fitted, test.scale$Attrition)
pred <- prediction(rf.fitted[,2], test.scale$Attrition)
rf.fitted=predict(trf,newdata=test.scale[,!names(test.scale) %in% "Attrition"],type="class")
cm_rf=table(Predicted=rf.fitted,Actual=test.scale$Attrition)
confusionMatrix(cm_rf,positive="1",mode="prec_recall")
pred <- prediction(rf.fitted, test.scale$Attrition)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message=FALSE)
pred <- prediction(as.data.frame(rf.fitted),test.scale$Attrition)
pred <- prediction(data.frame(rf.fitted),test.scale$Attrition)
library(dplyr)
#library(ggplot2)
##install.packages("ggthemes")
#library(ggthemes)
#library(corrplot)
##install.packages("forcats")
library(forcats)
##install.packages("gridExtra")
#library(gridExtra)
#library(stringr)
library(caret)
##install.packages("formattable")
#library(formattable)
library(rpart)
library(rpart.plot)
#library(Deducer)
##install.packages("Boruta")
#library(Boruta)
##install.packages("DMwR")
library(DMwR)
library(ROCR)
##install.packages("dummy")
#library(dummy)
library(neuralnet)
##install.packages("caretEnsemble")
#library(caretEnsemble)
##install.packages("h20")
#library(h2o)
attr = read.csv("HR_Employee_Attrition_Data.csv", header = TRUE)
attr = Data <- subset( attr, select = -c(EmployeeCount,
EmployeeNumber,
StandardHours,
Over18
) )
set.seed(1000)
a=createDataPartition(attr$Attrition,p=0.7,list=FALSE)
train=attr[a,]
test=attr[-a,]
cat("Train data has",nrow(train),"observations")
cat("Test data has",nrow(test),"observations")
train=train %>% mutate(Attrition=factor(Attrition)) %>% mutate(Attrition=fct_recode(Attrition,"0"="No","1"="Yes"))
test=test %>% mutate(Attrition=factor(Attrition)) %>% mutate(Attrition=fct_recode(Attrition,"0"="No","1"="Yes"))
#scale the data:
num=list(names(numeric))
train.num=scale(train[,names(train) %in% num[[1]]])
train.scale=cbind(train[,!names(train) %in% num[[1]]],train.num)
test.num=scale(test[,names(test) %in% num[[1]]])
test.scale=cbind(test[,!names(test) %in% num[[1]]],test.num)
#str(train)
factor.col=c("BusinessTravel","EnvironmentSatisfaction","Gender","JobInvolvement","JobLevel","JobSatisfaction","MaritalStatus","OverTime","PerformanceRating","RelationshipSatisfaction","WorkLifeBalance","Department","EducationField","JobRole")
train.scale[factor.col]=lapply(train.scale[factor.col],factor)
test.scale[factor.col]=lapply(test.scale[factor.col],factor)
p=prop.table(table(train.scale$Attrition))
cat("Before SMOTE the propotions are:"); print(p,row.names=FALSE)
##
##         0         1
## 0.8387567 0.1612433
set.seed(1000)
smote_train=SMOTE(Attrition ~ .,data=train.scale)
q=prop.table(table(smote_train$Attrition))
cat("After SMOTE the propotions are:"); print(q,row.names=FALSE)
set.seed(1000)
r.control=rpart.control(minsplit=60,minbucket =20,cp=0,xval=3)
cart.train=rpart(Attrition~.,data=smote_train,method="class",control=r.control)
cmt=table(Predicted=predict(cart.train,smote_train,type="class"),Actual=smote_train$Attrition)
confusionMatrix(cmt,positive="1",mode="everything")
install.packages("RcoloBrewer")
#library(RColorBrewer)
#fancyRpartPlot(cart.train)
printcp(cart.train)
rpart.plot(cart.train)
##Pruning decision tree ##
ptree = prune(cart.train, cp= 0.0075301205 , "CP")
printcp(ptree)
rpart.plot(ptree)
smote_train$predict.class=predict(ptree,smote_train,type="class")
smote_train$predict.score=predict(ptree,smote_train)
deciles <- vector(length=10)
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
smote_train$deciles <- decile(smote_train$predict.score[,2])
library(data.table)
library(scales)
tmp_DT = data.table(smote_train)
rank <- tmp_DT[, list(
cnt = length(AttritionYes),
cnt_AtrY = sum(AttritionYes),
cnt_AtrN = sum(AttritionYes == 0)) ,
by=deciles][order(-deciles)]
View(smote_train)
rank <- tmp_DT[, list(
cnt = length(Attrition),
cnt_AtrY = sum(Attrition),
cnt_AtrN = sum(Attrition == 0)) ,
by=deciles][order(-deciles)]
tmp_DT$Attrition=as.numeric(as.character(tmp_DT$Attrition))
rank <- tmp_DT[, list(
cnt = length(Attrition),
cnt_AtrY = sum(Attrition),
cnt_AtrN = sum(Attrition == 0)) ,
by=deciles][order(-deciles)]
rank$rrate <- round (rank$cnt_AtrY / rank$cnt,2);
rank$cum_cnt_AtrY <- cumsum(rank$cnt_AtrY)
rank$cum_cnt_AtrN <- cumsum(rank$cnt_AtrN)
rank$cum_rel_AtrY <- round(rank$cnt_AtrY / sum(rank$cnt_AtrY),2);
rank$cum_rel_AtrN <- round(rank$cnt_AtrN / sum(rank$cnt_AtrN),2);
rank$ks <- abs(rank$cum_rel_AtrY - rank$cum_rel_AtrN);
rank$rrate <- percent(rank$rrate)
rank$cum_rel_AtrY <- percent(rank$cum_rel_AtrY)
rank$cum_rel_AtrN <- percent(rank$cum_rel_AtrN)
library(scales)
View(rank)
write.csv(rank,file="rank_cart.csv",row.names=FALSE)
pred <- ROCR::prediction(smote_train$predict.score[,2], smote_train$Target)
pred <- ROCR::prediction(smote_train$predict.score[,2], smote_train$Attrition)
perf <- performance(pred, "tpr", "fpr")
KS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])
auc <- performance(pred,"auc");
auc <- as.numeric(auc@y.values)
test.scale$predict.class <- predict(ptree, test.scale, type="class")
test.scale$predict.score <- predict(ptree, test.scale)
test.scale$deciles <- decile(test.scale$predict.score[,2])
library(data.table)
tmp_DT = data.table(test.scale)
tmp_DT$Attrition=as.numeric(as.character(tmp_DT$Attrition))
h_rank <- tmp_DT[, list(
cnt = length(Attrition),
cnt_resp = sum(Attrition),
cnt_non_resp = sum(Attrition == 0)) ,
by=deciles][order(-deciles)]
h_rank$rrate <- round(h_rank$cnt_resp * 100 / h_rank$cnt,2);
h_rank$cum_resp <- cumsum(h_rank$cnt_resp)
h_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)
h_rank$cum_perct_resp <- round(h_rank$cum_resp * 100 / sum(h_rank$cnt_resp),2);
h_rank$cum_perct_non_resp <- round(h_rank$cum_non_resp * 100 / sum(h_rank$cnt_non_resp),2);
h_rank$ks <- abs(h_rank$cum_perct_resp - h_rank$cum_perct_non_resp);
pred <- ROCR::prediction(test.scale$predict.class, test.scale$Attrition)
pred <- ROCR::prediction(test.scale$predict.class[,2], test.scale$Attrition)
pred <- ROCR::prediction(test.scale$predict.score[,2], test.scale$Attrition)
perf <- performance(pred, "tpr", "fpr")
KS <- max(attr(perf, 'y.values')[[1]]-attr(perf, 'x.values')[[1]])
auc <- performance(pred,"auc");
write.csv(h_rank,file="rank_cart_test.csv",row.names = FALSE)
library(scales)
h_rank$rrate <- percent(h_rank$rrate)
h_rank$cum_rel_AtrY <- percent(h_rank$cum_rel_AtrY)
h_rank$cum_rel_AtrN <- percent(h_rank$cum_rel_AtrN)
write.csv(h_rank,file="rank_cart_test.csv",row.names = FALSE)
write.csv(h_rank,file="rank_cart_test.csv",row.names = FALSE)
tmp_DT = data.table(test.scale)
tmp_DT$Attrition=as.numeric(as.character(tmp_DT$Attrition))
h_rank <- tmp_DT[, list(
cnt = length(Attrition),
cnt_resp = sum(Attrition),
cnt_non_resp = sum(Attrition == 0)) ,
by=deciles][order(-deciles)]
h_rank$rrate <- round(h_rank$cnt_resp * 100 / h_rank$cnt,2);
h_rank$cum_resp <- cumsum(h_rank$cnt_resp)
h_rank$cum_non_resp <- cumsum(h_rank$cnt_non_resp)
h_rank$cum_perct_resp <- round(h_rank$cum_resp * 100 / sum(h_rank$cnt_resp),2);
h_rank$cum_perct_non_resp <- round(h_rank$cum_non_resp * 100 / sum(h_rank$cnt_non_resp),2);
h_rank$ks <- abs(h_rank$cum_perct_resp - h_rank$cum_perct_non_resp);
library(scales)
h_rank$rrate <- percent(h_rank$rrate)
h_rank$cum_rel_AtrY <- percent(h_rank$cum_rel_AtrY)
h_rank$cum_rel_AtrN <- percent(h_rank$cum_rel_AtrN)
#View(h_rank)
write.csv(h_rank,file="rank_cart_test.csv",row.names = FALSE)
View(h_rank)
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message = FALSE)
library(plyr)
library(tidyverse)
library(formattable)
library(splitstackshape)
library(jsonlite)
library(wordcloud)
library(RColorBrewer)
library(ggthemes)
library(tm)
library(RSentiment)
library(zoo)
library(stringr)
movie=read_csv("tmdb_5000_movies.csv",col_names=TRUE,na="NA")
credits=read_csv("tmdb_5000_credits.csv",col_names=TRUE,na="NA")
genre=movie %>% filter(nchar(genres)>2) %>% mutate(js=lapply(genres,fromJSON)) %>% unnest(js) %>% select(id,title,genre=name) #Convert JSON format into data frame
#genre=aggregate(genre ~.,data=genre,paste,collapse=",") # remove duplicates
credit=credits %>% filter(nchar(cast)>2) %>% mutate(js=lapply(cast,fromJSON)) %>% unnest(js)
cat("Before JS the columns are ",names(credit),sep='\n')
credit= credit%>% select(-c(crew,cast_id,credit_id,id))
cat("After removing id columns the names are",names(credit),sep='\n')
revenue=function (df,col_name,x,y,title){
temp_df=df %>% filter(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
df_plot= ggplot(temp_df,aes(reorder(original_title,revenue),revenue,fill=original_title))+geom_bar(stat="identity")+theme_few()+theme(axis.text.x = element_text(angle=90,vjust=0.5),plot.title=element_text(hjust=0.5,size=15),legend.position="none")+labs(x=x,y=y,title=title)+coord_flip()+scale_x_discrete(labels=function(x)str_wrap(x,width=12))+scale_y_continuous(labels=scales::comma)
}
artist=revenue(db_credit,name="Samuel L.Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue=function (df,col_name,x,y,title){
temp_df=df %>% filter(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
df_plot= ggplot(temp_df,aes(reorder(original_title,revenue),revenue,fill=original_title))+geom_bar(stat="identity")+theme_few()+theme(axis.text.x = element_text(angle=90,vjust=0.5),plot.title=element_text(hjust=0.5,size=15),legend.position="none")+labs(x=x,y=y,title=title)+coord_flip()+scale_x_discrete(labels=function(x)str_wrap(x,width=12))+scale_y_continuous(labels=scales::comma)
print(df_plot)
return(temp_df)
}
revenue(db_credit,col_name="Samuel L.Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
db=movie %>% left_join(credits,by=c("id"="movie_id"))
db_credit=db %>% filter(nchar(cast)>2) %>% mutate(js=lapply(cast,fromJSON)) %>% unnest(js)
revenue(db_credit,col_name="Samuel L.Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
col_name="Samuel L.Jackson"
temp_df=df %>% filter(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
temp_df=df %>% subset(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
df=db_credit
View(df)
temp_df=df %>% subset(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
credit %>% group_by(name) %>% tally() %>% arrange(desc(n)) %>% head(10) %>% ggplot(aes(factor(name,levels=name),n,fill=name))+geom_bar(stat="identity")+labs(x="Artist",y="Count",title="Top 10 artist with most movies")+theme_few()+theme(axis.text.x=element_text(angle=90),plot.title=element_text(hjust=0.5,color="red"),legend.position="none")
df_credit=credit %>% group_by(name) %>% tally() %>% arrange(desc(n)) %>% head(10)
View(df_credit)
col_name="Samuel L. Jackson"
temp_df=df %>% subset(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
revenue=function (df,col_name,x,y,title){
temp_df=df %>% filter(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
df_plot= ggplot(temp_df,aes(reorder(original_title,revenue),revenue,fill=original_title))+geom_bar(stat="identity")+theme_few()+theme(axis.text.x = element_text(angle=90,vjust=0.5),plot.title=element_text(hjust=0.5,size=15),legend.position="none")+labs(x=x,y=y,title=title)+coord_flip()+scale_x_discrete(labels=function(x)str_wrap(x,width=12))+scale_y_continuous(labels=scales::comma)
print(df_plot)
return(temp_df)
}
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue=function (df,col_name,x,y,title){
temp_df=df %>% filter(name==col_name) %>% arrange(desc(revenue)) %>% head(10)
df_plot= ggplot(temp_df,aes(reorder(original_title,revenue),revenue,fill=original_title))+geom_bar(stat="identity")+theme_few()+theme(axis.text.x = element_text(angle=90,vjust=0.5),plot.title=element_text(hjust=0.5,size=15),legend.position="none")+labs(x=x,y=y,title=title)+coord_flip()+scale_x_discrete(labels=function(x)str_wrap(x,width=15))+scale_y_continuous(labels=scales::comma)
print(df_plot)
return(temp_df)
}
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
revenue(db_credit,col_name="Robert De Niro",x="Title",y="Revenue",title="Robert De Niro-Top 10 by revenue" )
revenue(db_credit,col_name="Bruce Willis",x="Title",y="Revenue",title="Bruce Willis-Top 10 by revenue" )
p1=revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
p2=revenue(db_credit,col_name="Robert De Niro",x="Title",y="Revenue",title="Robert De Niro-Top 10 by revenue" )
p3=revenue(db_credit,col_name="Bruce Willis",x="Title",y="Revenue",title="Bruce Willis-Top 10 by revenue" )
p4=revenue(db_credit,col_name="Matt Damon",x="Title",y="Revenue",title="Matt Damon-Top 10 by revenue" )
p5=revenue(db_credit,col_name="Morgan Freeman",x="Title",y="Revenue",title="Morgan Freeman-Top 10 by revenue" )
gridExtra::grid.arrange(p1,p2,p3,p4,p5,ncol=1,main=" Highest revenue movie by most prominent actors ")
revenue(db_credit,col_name="Samuel L. Jackson",x="Title",y="Revenue",title="Samuel L.Jackson-Top 10 by revenue" )
setwd("~/Downloads/R/TMDB")
knitr::opts_chunk$set(echo = TRUE,warning=FALSE,message = FALSE)
library(plyr)
library(tidyverse)
library(formattable)
library(splitstackshape)
library(jsonlite)
library(wordcloud)
library(RColorBrewer)
library(ggthemes)
library(tm)
library(RSentiment)
library(zoo)
library(stringr)
movie=read_csv("tmdb_5000_movies.csv",col_names=TRUE,na="NA")
credits=read_csv("tmdb_5000_credits.csv",col_names=TRUE,na="NA")
credit=credits %>% filter(nchar(cast)>2) %>% mutate(js=lapply(cast,fromJSON)) %>% unnest(js)
credit= credit%>% select(-c(crew,cast_id,credit_id,id))
df_credit=credit %>% group_by(name) %>% tally() %>% arrange(desc(n)) %>% head(10)
db=movie %>% left_join(credits,by=c("id"="movie_id"))
db_credit=db %>% filter(nchar(cast)>2) %>% mutate(js=lapply(cast,fromJSON)) %>% unnest(js)
temp=db_credit %>% filter(name=="Tom Cruise") %>% subset(!(duplicated(original_title))) %>% arrange(desc(budget)) %>% head(20)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+geom_point()+geom_smooth(method="lm")+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Bruce Wills-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
temp=db_credit %>% filter(name=="Tom Cruise") %>% subset(!(duplicated(original_title))) %>% arrange(desc(budget)) %>% head(20)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+geom_point()+stat_smooth(method="lm",color="orchid",size=2)+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+stat_bin_hex(bins=50)+stat_smooth(method="lm",color="orchid",size=2)+scale_fill_distiller(palette="Spectral")+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
ggplot(temp,aes(budget,(popularity)))+stat_bin_hex(bins=50)+stat_smooth(method="lm",color="orchid",size=2)+scale_fill_distiller(palette="Spectral")+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
temp=db_credit %>% filter(name=="Tom Cruise") %>% subset(!(duplicated(original_title))) %>% arrange(desc(budget))
ggplot(temp,aes(budget,(popularity)))+stat_bin_hex(bins=50)+stat_smooth(method="lm",color="orchid",size=2)+scale_fill_distiller(palette="Spectral")+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
temp=db_credit %>% filter(name=="Tom Cruise") %>% subset(!(duplicated(original_title))) %>% arrange(desc(budget)) %>% head(20)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+geom_point()+stat_smooth(method="lm",color="orchid",size=2)+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
temp=db_credit %>% filter(name=="Bruce Willis") %>% subset(!(duplicated(original_title))) %>% arrange(desc(budget)) %>% head(20)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+geom_point()+stat_smooth(method="lm",color="orchid",size=2)+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Bruce Wills-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scales::comma)
db_credit %>% select(unique(budget),unique(popularity)) %>% ggplot(aes(budget,popularity))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>% select(budget,popularity) %>% ggplot(aes(distinct(budget),distinct(popularity))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>% select(budget,popularity) %>% ggplot(aes(distinct(budget),distinct(popularity)))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>% select(distinct(budget),distinct(popularity)) %>% ggplot(aes(budget,popularity))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
temp=db_credit %>%  select(budget,popularity) %>% distinct() #%>% #ggplot(aes(budget,popularity))+stat_bin_hex()+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
View(temp)
length(unique(temp))
length(unique(temp$budget))
length(unique(temp$popularity))
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=1)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=5)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=10)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=14)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=14)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scale::comma)
ggplot(temp,aes(budget,as.integer(popularity),col=factor(original_title),size=popularity))+geom_point()+stat_smooth(method="lm",color="orchid",size=2)+theme(legend.position="bottom",plot.title=element_text(hjust=0.5,size=10),axis.text.x = element_text(angle = 90,hjust=0.5))+labs(x="Revenue",y="Popularity",title="Tom Cruise-Correlation between popularity and budget",subtitle="Filter by Top 20 Higest budget movies")+scale_x_continuous(labels=scale::comma)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=14)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic(r) == cor, list(cor = format(m, digits = 2)))
as.character(as.expression(eq));
}
db_credit %>%  select(budget,popularity) %>% distinct() %>% ggplot(aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", x = 85000, y = 2.7, label = get_cor(data.frame(x = budget, y = popularity)), parse = TRUE, color = "orchid", size = 7)
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", x = 85000, y = 2.7, label = get_cor(data.frame(x = temp$budget, y =temp$popularity)), parse = TRUE, color = "orchid", size = 7)
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", x = 85000, y = 2.7,label = get_cor(data.frame(x = temp$budget, y =temp$popularity)), parse = TRUE, color = "orchid", size = 7)
get_cor(data.frame(x = temp$budget, y =temp$popularity))
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", x = 85000, y = 2.7,label = get_cor(data.frame(x = temp$budget, y =temp$popularity)),parse = TRUE, color = "orchid", size = 7)
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic(r) == cor,list(cor = format(m, digits = 2)))
as.character(as.expression(eq));
}
temp=db_credit %>%  select(budget,popularity) %>% distinct()
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", x = 85000, y = 2.7,label = get_cor(data.frame(x = temp$budget, y =temp$popularity)),parse = TRUE, color = "orchid", size = 7)
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)+annotate("text", label = get_cor(data.frame(x = temp$budget, y =temp$popularity)),parse = TRUE, color = "orchid", size = 7)
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+annotate("text", label = get_cor(data.frame(x = temp$budget, y =temp$popularity)),parse = TRUE, color = "orchid", size = 7)+scale_x_continuous(labels=scales::comma)
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
cat("Correlation value is",get_cor(data.frame(temp$budget,temp$popularity)))
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
library(plotmath)
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(r== cor,list(cor = format(m, digits = 2)))
as.character(as.expression(eq));
}
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic(r)== cor,list(cor = format(m, digits = 2)))
as.character(as.expression(eq));
}
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic('r')= cor,list(cor = format(m, digits = 2)))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic('r')== cor,list(cor = format(m, digits = 2)))
as.character(as.expression(eq));
}
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(paste(italic('r')== cor,list(cor = format(m, digits = 2))))
as.character(as.expression(eq));
}
ggplot(temp,aes(budget,popularity))+stat_bin_hex(bins=15)+scale_fill_distiller(palette="Spectral")+stat_smooth(method="lm",color="orchid",size=2)+scale_x_continuous(labels=scales::comma)
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic('r')== cor,list(cor = format(m, digits = 2)))
return(eq)
}
cat("Correlation value is",get_cor(data.frame(x=temp$budget,y=temp$popularity)))
get_cor(data.frame(x=temp$budget,y=temp$popularity))
library(methods)
library(data.table)
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(italic('r')== cor,list(cor = format(m, digits = 2)))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- (substitute(expr=expression(italic('r')== cor),env=list(cor = format(m, digits = 2))))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- (substitute(expr=expression(italic('r')=cor),env=list(cor = format(m, digits = 2))))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- (substitute(expr=expression(paste("Correlation is",italic(cor))),env=list(cor=format(m, digits = 2))))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- expression(paste("Correlation is",italic(cor)))
return(eq)
}
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- expression(paste("Correlation is",italic(m)))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=expression(paste("Correlation is",italic(cor))),env=list(cor=format(m, digits = 2)))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=expression(paste("Correlation is",italic(cor))),env=list(cor=format(m, digits = 4)))
return(eq)
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=expression(paste("Correlation is",italic(cor))),env=list(cor=format(m, digits = 4)))
return(as.character(as.expression(eq) ))
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=paste("Correlation is",italic(cor)),env=list(cor=format(m, digits = 4)))
return(as.character(as.expression(eq) ))
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=italic(r)==cor,env=list(cor=format(m, digits = 4)))
return(as.character(as.expression(eq) ))
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
get_cor <- function(df){
m <- cor(df$x,df$y, use="pairwise.complete.obs");
eq <- substitute(expr=r==cor,env=list(cor=format(m, digits = 4)))
return(as.character(as.expression(eq) ))
}
get_cor(data.frame(x=temp$budget,y=temp$popularity))
